<h3>YouTube Video Carousel</h3>

@if (videos == null)
{
    <MudProgressLinear Color="Color.Primary" Size="Size.Medium" Value="50" Indeterminate="true" Class="my-7" />

}
else if (videos.Any())
{
<div class="video-carousel" style="display: flex; justify-content: space-around;">
    @foreach (var video in videos)
    {
        <div class="video-item" style="flex: 1; margin: 10px;">
                <iframe width="300" height="169"
                        src="@($"https://www.youtube.com/embed/{video.VideoId}")"
                        frameborder="0" allowfullscreen></iframe>
            @* <p>@video.Title</p> *@
            <p><small>Publicado el @video.FormattedDate</small></p>
        </div>
    }
</div>
}
else
{
    <p>No videos found.</p>
}

@code {
    private List<YouTubeVideo> videos;

    protected override async Task OnInitializedAsync()
    {
        videos = await GetLatestVideosAsync();
    }

    private async Task<List<YouTubeVideo>> GetLatestVideosAsync()
    {
        var apiKey = "AIzaSyDSHSJLvlcayYBcQfFllUepxk5HNEMl2Ws";
        var channelId = "UCDDXY90tCmbU57J8J4-_T1w";

        var youtubeService = new Google.Apis.YouTube.v3.YouTubeService(new Google.Apis.Services.BaseClientService.Initializer()
            {
                ApiKey = apiKey,
                ApplicationName = "YouTubeAPIExample"
            });

        var searchListRequest = youtubeService.Search.List("snippet");
        searchListRequest.ChannelId = channelId;
        searchListRequest.MaxResults = 3;
        searchListRequest.Order = Google.Apis.YouTube.v3.SearchResource.ListRequest.OrderEnum.Date;

        var searchListResponse = await searchListRequest.ExecuteAsync();

        return searchListResponse.Items.Select(item => new YouTubeVideo
            {
                // Title = item.Snippet.Title,
                VideoId = item.Id.VideoId,
                PublishedAt = item.Snippet.PublishedAt.ToString()
            }).ToList();
    }

    public class YouTubeVideo
    {
        // public string Title { get; set; }
        public string VideoId { get; set; }
        public string PublishedAt { get; set; }

        public string FormattedDate => DateTime.Parse(PublishedAt).ToString("dd-MM-yyyy");
    }
}
